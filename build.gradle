plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm' version '1.8.10'
}

apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	main.kotlin.srcDirs += 'src/main/kotlin'
	main.java.srcDirs += 'src/main/java'
}

repositories {
	maven { url = "https://maven.fabricmc.net/" }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	mavenLocal()
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	// Replace modImplementation with modApi if you expose components in your own API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"

	modImplementation "io.github.cottonmc:LibGui:${project.libgui_version}"
	include "io.github.cottonmc:LibGui:${project.libgui_version}"

	modImplementation "software.bernie.geckolib:geckolib-fabric-${project.geckolib_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"